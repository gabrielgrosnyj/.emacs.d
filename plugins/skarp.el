
(defun sharp-snippet ()
  "Compile and run a C# snippet."
  (interactive)
  (save-excursion
	(if (region-active-p)
		(progn
		  (let (temp-file exe-file cmpl-cmd rstart rend code-snippet curr-dir last-compile-cmd last-compile-dir)
			;; (setq temp-file (make-temp-file "skarp"))
			(setq curr-dir default-directory)
            (setq last-compile-cmd compile-command)
            (setq last-compile-dir compilation-directory)
			(cd temporary-file-directory)
			(setq temp-file "skarp.cs")
			;; (setq exe-file (concat temp-file ".exe"))
			(setq exe-file "skarp.exe")
			(setq cmpl-cmd (concat "csc " temp-file " -reference:System.IdentityModel.dll -unsafe && ./" exe-file))
			(setq rstart (region-beginning))
			(setq rend (region-end))
			(setq code-snippet (buffer-substring-no-properties rstart rend))
			;; (message (buffer-substring-no-properties rstart rend))
			;; (message temp-file)
			;; (message exe-file)
			;; (message cmpl-cmd)
			;; (message "%d, %d" rstart rend)
			(with-temp-buffer
			  (insert "using System;\n")
			  (insert "using System.Text;\n")
			  (insert "using System.Security;\n")
			  (insert "using System.IO;\n")
			  (insert "using System.Linq;\n")
			  (insert "using System.Collections.Generic;\n")
			  (insert "using System.Text.RegularExpressions;\n")
              (insert "using System.Security.Cryptography.X509Certificates;\n")
              (insert "using System.Security.Cryptography;\n")
              (insert "using System.IdentityModel.Selectors;\n")
              (insert "using System.Reflection;\n")
              (insert "using System.ServiceModel;\n")
              (insert "using System.ServiceModel.Channels;\n")
              (insert "using System.Runtime.InteropServices;\n")
              (insert "using System.Globalization;\n")
              (insert "using System.Threading;\n")
              (insert "using System.Threading.Tasks;\n")
			  (insert "static class __Program__\n")
			  (insert "{\n")
			  (insert "\n")
			  (insert "    public static void Dump<T,S>(this Dictionary<T,S> s)\n")
			  (insert "    {\n")
			  (insert "        foreach (var t in s)\n")
			  (insert "        {\n")
			  (insert "            Console.WriteLine(t.Key + \", \" + t.Value);\n")
			  (insert "        }\n")
			  (insert "    }\n")
			  (insert "\n")
			  (insert "    public static void Dump<T>(this List<T> s)\n")
			  (insert "    {\n")
			  (insert "        foreach (T t in s)\n")
			  (insert "        {\n")
			  (insert "            t.Dump();\n")
			  (insert "        }\n")
			  (insert "    }\n")
			  (insert "\n")
			  (insert "    public static void Dump<T>(this T s)\n")
			  (insert "    {\n")
			  (insert "        if (s is Array)\n")
			  (insert "        {\n")
			  (insert "            Array arr = (s as Array);\n")
			  (insert "            for (int i = 0; i < arr.Length; i++)\n")
			  (insert "            {\n")
			  (insert "                arr.GetValue(i).Dump();\n")
			  (insert "            }\n")
			  (insert "        }\n")
			  (insert "        else\n")
			  (insert "        {\n")
			  (insert "            Console.WriteLine(s);\n")
			  (insert "        }\n")
			  (insert "    }\n")
			  (insert "\n")
			  (insert "    static void Main(string[] argv)\n")
			  (insert "    {\n")
			  (insert "        Console.WriteLine(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\\n\");\n")
			  (insert "\n")
			  (insert code-snippet)
			  (insert "\n")
			  (insert "        Console.WriteLine(\"\\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\");\n")
			  (insert "    }\n")
			  (insert "}\n")
			  (when (file-writable-p temp-file)
				(write-region (point-min)
							  (point-max)
							  temp-file))
			  )
			(compile cmpl-cmd)
			(cd curr-dir)
            (setq compile-command last-compile-cmd)
            (setq compilation-directory last-compile-dir)
			)
		  )
	  (message "No region found!")
	  )
	)
  )

(provide 'skarp)
