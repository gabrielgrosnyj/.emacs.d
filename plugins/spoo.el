
(defun spoo-snippet ()
  "Compile and run a C++11 snippet."
  (interactive)
  (save-excursion
	(if (region-active-p)
		(progn
		  (let (temp-file exe-file cmpl-cmd rstart rend code-snippet curr-dir last-compile-cmd last-compile-dir)
			;; (setq temp-file (make-temp-file "skarp"))
			(setq curr-dir default-directory)
            (setq last-compile-cmd compile-command)
            (setq last-compile-dir compilation-directory)
			(cd temporary-file-directory)
			(setq temp-file "spoo.cpp")
			;; (setq exe-file (concat temp-file ".exe"))
			(setq exe-file "spoo.exe")
			(setq cmpl-cmd (concat "cl.exe -EHsc " temp-file " && ./" exe-file))
			(setq rstart (region-beginning))
			(setq rend (region-end))
			(setq code-snippet (buffer-substring-no-properties rstart rend))
			;; (message (buffer-substring-no-properties rstart rend))
			;; (message temp-file)
			;; (message exe-file)
			;; (message cmpl-cmd)
			;; (message "%d, %d" rstart rend)
			(with-temp-buffer
              (insert "#include <iostream>\n")
              (insert "#include <string>\n")
              (insert "#include <vector>\n")
              (insert "#include <chrono>\n")
              (insert "#include <ctime>\n")
              (insert "#include <memory>\n")
              (insert "\n")
              (insert "using namespace std;\n")
              (insert "\n")
              (insert "std::string as_string (const std::chrono::system_clock::time_point& tp)\n")
              (insert "{\n")
              (insert "     // convert to system time:\n")
              (insert "     std::time_t t = std::chrono::system_clock::to_time_t(tp);\n")
              (insert "     std::string ts = std::ctime(&t);// convert to calendar time\n")
              (insert "     ts.resize(ts.size()-1);         // skip trailing newline\n")
              (insert "     return ts;\n")
              (insert "}\n")
              (insert "\n")
              (insert "template<typename T>\n")
              (insert "std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec)\n")
              (insert "{\n")
              (insert "    for (auto& el : vec)\n")
              (insert "    {\n")
              (insert "        os << el << std::endl;\n")
              (insert "    }\n")
              (insert "    return os;\n")
              (insert "}\n")
              (insert "\n")
              (insert "std::ostream& operator<<(std::ostream& os, const std::chrono::system_clock::time_point& tp)\n")
              (insert "{\n")
              (insert "    os << as_string(tp);\n")
              (insert "    return os;\n")
              (insert "}\n")
              (insert "\n")
              (insert "int main()\n")
              (insert "{\n")
              (insert "\n")
              (insert "    cout << endl\n")
              (insert "         << \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\"\n")
              (insert "         << endl\n")
              (insert "         << endl;\n")
              (insert "\n")
			  (insert code-snippet)
              (insert "\n")
              (insert "    cout << endl\n")
              (insert "         << \"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\"\n")
              (insert "         << endl;\n")
              (insert "}\n")
			  (when (file-writable-p temp-file)
				(write-region (point-min)
							  (point-max)
							  temp-file))
			  )
			(compile cmpl-cmd)
			(cd curr-dir)
            (setq compile-command last-compile-cmd)
            (setq compilation-directory last-compile-dir)
			)
		  )
	  (message "No region found!")
	  )
	)
  )

(provide 'spoo)
